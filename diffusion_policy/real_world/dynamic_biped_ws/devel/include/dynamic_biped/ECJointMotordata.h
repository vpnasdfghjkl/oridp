// Generated by gencpp from file dynamic_biped/ECJointMotordata.msg
// DO NOT EDIT!


#ifndef DYNAMIC_BIPED_MESSAGE_ECJOINTMOTORDATA_H
#define DYNAMIC_BIPED_MESSAGE_ECJOINTMOTORDATA_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace dynamic_biped
{
template <class ContainerAllocator>
struct ECJointMotordata_
{
  typedef ECJointMotordata_<ContainerAllocator> Type;

  ECJointMotordata_()
    : l_pos_pitch(0)
    , l_pos_yaw(0)
    , l_pos_end(0)
    , r_pos_pitch(0)
    , r_pos_yaw(0)
    , r_pos_end(0)  {
    }
  ECJointMotordata_(const ContainerAllocator& _alloc)
    : l_pos_pitch(0)
    , l_pos_yaw(0)
    , l_pos_end(0)
    , r_pos_pitch(0)
    , r_pos_yaw(0)
    , r_pos_end(0)  {
  (void)_alloc;
    }



   typedef int32_t _l_pos_pitch_type;
  _l_pos_pitch_type l_pos_pitch;

   typedef int32_t _l_pos_yaw_type;
  _l_pos_yaw_type l_pos_yaw;

   typedef int32_t _l_pos_end_type;
  _l_pos_end_type l_pos_end;

   typedef int32_t _r_pos_pitch_type;
  _r_pos_pitch_type r_pos_pitch;

   typedef int32_t _r_pos_yaw_type;
  _r_pos_yaw_type r_pos_yaw;

   typedef int32_t _r_pos_end_type;
  _r_pos_end_type r_pos_end;





  typedef boost::shared_ptr< ::dynamic_biped::ECJointMotordata_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dynamic_biped::ECJointMotordata_<ContainerAllocator> const> ConstPtr;

}; // struct ECJointMotordata_

typedef ::dynamic_biped::ECJointMotordata_<std::allocator<void> > ECJointMotordata;

typedef boost::shared_ptr< ::dynamic_biped::ECJointMotordata > ECJointMotordataPtr;
typedef boost::shared_ptr< ::dynamic_biped::ECJointMotordata const> ECJointMotordataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::dynamic_biped::ECJointMotordata_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::dynamic_biped::ECJointMotordata_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::dynamic_biped::ECJointMotordata_<ContainerAllocator1> & lhs, const ::dynamic_biped::ECJointMotordata_<ContainerAllocator2> & rhs)
{
  return lhs.l_pos_pitch == rhs.l_pos_pitch &&
    lhs.l_pos_yaw == rhs.l_pos_yaw &&
    lhs.l_pos_end == rhs.l_pos_end &&
    lhs.r_pos_pitch == rhs.r_pos_pitch &&
    lhs.r_pos_yaw == rhs.r_pos_yaw &&
    lhs.r_pos_end == rhs.r_pos_end;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::dynamic_biped::ECJointMotordata_<ContainerAllocator1> & lhs, const ::dynamic_biped::ECJointMotordata_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace dynamic_biped

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::dynamic_biped::ECJointMotordata_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dynamic_biped::ECJointMotordata_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dynamic_biped::ECJointMotordata_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dynamic_biped::ECJointMotordata_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dynamic_biped::ECJointMotordata_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dynamic_biped::ECJointMotordata_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::dynamic_biped::ECJointMotordata_<ContainerAllocator> >
{
  static const char* value()
  {
    return "da126c0fb22352a555bc24cbdebe8a85";
  }

  static const char* value(const ::dynamic_biped::ECJointMotordata_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xda126c0fb22352a5ULL;
  static const uint64_t static_value2 = 0x55bc24cbdebe8a85ULL;
};

template<class ContainerAllocator>
struct DataType< ::dynamic_biped::ECJointMotordata_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dynamic_biped/ECJointMotordata";
  }

  static const char* value(const ::dynamic_biped::ECJointMotordata_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::dynamic_biped::ECJointMotordata_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 l_pos_pitch \n"
"int32 l_pos_yaw\n"
"int32 l_pos_end\n"
"int32 r_pos_pitch \n"
"int32 r_pos_yaw\n"
"int32 r_pos_end\n"
;
  }

  static const char* value(const ::dynamic_biped::ECJointMotordata_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::dynamic_biped::ECJointMotordata_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.l_pos_pitch);
      stream.next(m.l_pos_yaw);
      stream.next(m.l_pos_end);
      stream.next(m.r_pos_pitch);
      stream.next(m.r_pos_yaw);
      stream.next(m.r_pos_end);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ECJointMotordata_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dynamic_biped::ECJointMotordata_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::dynamic_biped::ECJointMotordata_<ContainerAllocator>& v)
  {
    s << indent << "l_pos_pitch: ";
    Printer<int32_t>::stream(s, indent + "  ", v.l_pos_pitch);
    s << indent << "l_pos_yaw: ";
    Printer<int32_t>::stream(s, indent + "  ", v.l_pos_yaw);
    s << indent << "l_pos_end: ";
    Printer<int32_t>::stream(s, indent + "  ", v.l_pos_end);
    s << indent << "r_pos_pitch: ";
    Printer<int32_t>::stream(s, indent + "  ", v.r_pos_pitch);
    s << indent << "r_pos_yaw: ";
    Printer<int32_t>::stream(s, indent + "  ", v.r_pos_yaw);
    s << indent << "r_pos_end: ";
    Printer<int32_t>::stream(s, indent + "  ", v.r_pos_end);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DYNAMIC_BIPED_MESSAGE_ECJOINTMOTORDATA_H
