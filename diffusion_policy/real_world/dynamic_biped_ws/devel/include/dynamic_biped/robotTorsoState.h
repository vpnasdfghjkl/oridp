// Generated by gencpp from file dynamic_biped/robotTorsoState.msg
// DO NOT EDIT!


#ifndef DYNAMIC_BIPED_MESSAGE_ROBOTTORSOSTATE_H
#define DYNAMIC_BIPED_MESSAGE_ROBOTTORSOSTATE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>

namespace dynamic_biped
{
template <class ContainerAllocator>
struct robotTorsoState_
{
  typedef robotTorsoState_<ContainerAllocator> Type;

  robotTorsoState_()
    : torsoR()
    , torsoRd()
    , torsoRdd()
    , r()
    , rd()
    , rdd()  {
    }
  robotTorsoState_(const ContainerAllocator& _alloc)
    : torsoR(_alloc)
    , torsoRd(_alloc)
    , torsoRdd(_alloc)
    , r(_alloc)
    , rd(_alloc)
    , rdd(_alloc)  {
  (void)_alloc;
    }



   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _torsoR_type;
  _torsoR_type torsoR;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _torsoRd_type;
  _torsoRd_type torsoRd;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _torsoRdd_type;
  _torsoRdd_type torsoRdd;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _r_type;
  _r_type r;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _rd_type;
  _rd_type rd;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _rdd_type;
  _rdd_type rdd;





  typedef boost::shared_ptr< ::dynamic_biped::robotTorsoState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dynamic_biped::robotTorsoState_<ContainerAllocator> const> ConstPtr;

}; // struct robotTorsoState_

typedef ::dynamic_biped::robotTorsoState_<std::allocator<void> > robotTorsoState;

typedef boost::shared_ptr< ::dynamic_biped::robotTorsoState > robotTorsoStatePtr;
typedef boost::shared_ptr< ::dynamic_biped::robotTorsoState const> robotTorsoStateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::dynamic_biped::robotTorsoState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::dynamic_biped::robotTorsoState_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::dynamic_biped::robotTorsoState_<ContainerAllocator1> & lhs, const ::dynamic_biped::robotTorsoState_<ContainerAllocator2> & rhs)
{
  return lhs.torsoR == rhs.torsoR &&
    lhs.torsoRd == rhs.torsoRd &&
    lhs.torsoRdd == rhs.torsoRdd &&
    lhs.r == rhs.r &&
    lhs.rd == rhs.rd &&
    lhs.rdd == rhs.rdd;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::dynamic_biped::robotTorsoState_<ContainerAllocator1> & lhs, const ::dynamic_biped::robotTorsoState_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace dynamic_biped

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::dynamic_biped::robotTorsoState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dynamic_biped::robotTorsoState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dynamic_biped::robotTorsoState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dynamic_biped::robotTorsoState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dynamic_biped::robotTorsoState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dynamic_biped::robotTorsoState_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::dynamic_biped::robotTorsoState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0cabdc260bffa0da5323abf719a81f3e";
  }

  static const char* value(const ::dynamic_biped::robotTorsoState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0cabdc260bffa0daULL;
  static const uint64_t static_value2 = 0x5323abf719a81f3eULL;
};

template<class ContainerAllocator>
struct DataType< ::dynamic_biped::robotTorsoState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dynamic_biped/robotTorsoState";
  }

  static const char* value(const ::dynamic_biped::robotTorsoState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::dynamic_biped::robotTorsoState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "geometry_msgs/Vector3 torsoR\n"
"geometry_msgs/Vector3 torsoRd\n"
"geometry_msgs/Vector3 torsoRdd\n"
"geometry_msgs/Vector3 r\n"
"geometry_msgs/Vector3 rd\n"
"geometry_msgs/Vector3 rdd\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::dynamic_biped::robotTorsoState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::dynamic_biped::robotTorsoState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.torsoR);
      stream.next(m.torsoRd);
      stream.next(m.torsoRdd);
      stream.next(m.r);
      stream.next(m.rd);
      stream.next(m.rdd);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct robotTorsoState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dynamic_biped::robotTorsoState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::dynamic_biped::robotTorsoState_<ContainerAllocator>& v)
  {
    s << indent << "torsoR: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.torsoR);
    s << indent << "torsoRd: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.torsoRd);
    s << indent << "torsoRdd: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.torsoRdd);
    s << indent << "r: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.r);
    s << indent << "rd: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.rd);
    s << indent << "rdd: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.rdd);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DYNAMIC_BIPED_MESSAGE_ROBOTTORSOSTATE_H
