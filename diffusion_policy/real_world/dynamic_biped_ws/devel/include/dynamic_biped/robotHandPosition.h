// Generated by gencpp from file dynamic_biped/robotHandPosition.msg
// DO NOT EDIT!


#ifndef DYNAMIC_BIPED_MESSAGE_ROBOTHANDPOSITION_H
#define DYNAMIC_BIPED_MESSAGE_ROBOTHANDPOSITION_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace dynamic_biped
{
template <class ContainerAllocator>
struct robotHandPosition_
{
  typedef robotHandPosition_<ContainerAllocator> Type;

  robotHandPosition_()
    : header()
    , left_hand_position()
    , right_hand_position()  {
    }
  robotHandPosition_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , left_hand_position(_alloc)
    , right_hand_position(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::vector<uint8_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<uint8_t>> _left_hand_position_type;
  _left_hand_position_type left_hand_position;

   typedef std::vector<uint8_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<uint8_t>> _right_hand_position_type;
  _right_hand_position_type right_hand_position;





  typedef boost::shared_ptr< ::dynamic_biped::robotHandPosition_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dynamic_biped::robotHandPosition_<ContainerAllocator> const> ConstPtr;

}; // struct robotHandPosition_

typedef ::dynamic_biped::robotHandPosition_<std::allocator<void> > robotHandPosition;

typedef boost::shared_ptr< ::dynamic_biped::robotHandPosition > robotHandPositionPtr;
typedef boost::shared_ptr< ::dynamic_biped::robotHandPosition const> robotHandPositionConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::dynamic_biped::robotHandPosition_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::dynamic_biped::robotHandPosition_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::dynamic_biped::robotHandPosition_<ContainerAllocator1> & lhs, const ::dynamic_biped::robotHandPosition_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.left_hand_position == rhs.left_hand_position &&
    lhs.right_hand_position == rhs.right_hand_position;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::dynamic_biped::robotHandPosition_<ContainerAllocator1> & lhs, const ::dynamic_biped::robotHandPosition_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace dynamic_biped

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::dynamic_biped::robotHandPosition_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dynamic_biped::robotHandPosition_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dynamic_biped::robotHandPosition_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dynamic_biped::robotHandPosition_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dynamic_biped::robotHandPosition_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dynamic_biped::robotHandPosition_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::dynamic_biped::robotHandPosition_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ee45ac8dfb6e0c9a4c7712025fd69d4f";
  }

  static const char* value(const ::dynamic_biped::robotHandPosition_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xee45ac8dfb6e0c9aULL;
  static const uint64_t static_value2 = 0x4c7712025fd69d4fULL;
};

template<class ContainerAllocator>
struct DataType< ::dynamic_biped::robotHandPosition_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dynamic_biped/robotHandPosition";
  }

  static const char* value(const ::dynamic_biped::robotHandPosition_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::dynamic_biped::robotHandPosition_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"uint8[] left_hand_position\n"
"uint8[] right_hand_position\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::dynamic_biped::robotHandPosition_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::dynamic_biped::robotHandPosition_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.left_hand_position);
      stream.next(m.right_hand_position);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct robotHandPosition_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dynamic_biped::robotHandPosition_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::dynamic_biped::robotHandPosition_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "left_hand_position[]" << std::endl;
    for (size_t i = 0; i < v.left_hand_position.size(); ++i)
    {
      s << indent << "  left_hand_position[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.left_hand_position[i]);
    }
    s << indent << "right_hand_position[]" << std::endl;
    for (size_t i = 0; i < v.right_hand_position.size(); ++i)
    {
      s << indent << "  right_hand_position[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.right_hand_position[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // DYNAMIC_BIPED_MESSAGE_ROBOTHANDPOSITION_H
